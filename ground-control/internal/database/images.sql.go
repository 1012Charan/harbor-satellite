// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: images.sql

package database

import (
	"context"
	"encoding/json"
)

const addImageList = `-- name: AddImageList :one
INSERT INTO images (group_id, image_list)
VALUES ($1, $2)
ON CONFLICT (group_id) DO UPDATE
SET image_list = EXCLUDED.image_list
RETURNING group_id, image_list
`

type AddImageListParams struct {
	GroupID   int32
	ImageList json.RawMessage
}

func (q *Queries) AddImageList(ctx context.Context, arg AddImageListParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, addImageList, arg.GroupID, arg.ImageList)
	var i Image
	err := row.Scan(&i.GroupID, &i.ImageList)
	return i, err
}

const deleteImageList = `-- name: DeleteImageList :exec
DELETE FROM images
WHERE group_id = $1
`

func (q *Queries) DeleteImageList(ctx context.Context, groupID int32) error {
	_, err := q.db.ExecContext(ctx, deleteImageList, groupID)
	return err
}

const getImageList = `-- name: GetImageList :one
SELECT image_list FROM images
WHERE group_id = $1
`

func (q *Queries) GetImageList(ctx context.Context, groupID int32) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getImageList, groupID)
	var image_list json.RawMessage
	err := row.Scan(&image_list)
	return image_list, err
}
